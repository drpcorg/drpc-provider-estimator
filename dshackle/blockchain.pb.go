// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: blockchain.proto

package dshackle

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AvailabilityEnum int32

const (
	AvailabilityEnum_AVAIL_UNKNOWN     AvailabilityEnum = 0
	AvailabilityEnum_AVAIL_OK          AvailabilityEnum = 1
	AvailabilityEnum_AVAIL_LAGGING     AvailabilityEnum = 2
	AvailabilityEnum_AVAIL_IMMATURE    AvailabilityEnum = 3
	AvailabilityEnum_AVAIL_SYNCING     AvailabilityEnum = 4
	AvailabilityEnum_AVAIL_UNAVAILABLE AvailabilityEnum = 5
)

// Enum value maps for AvailabilityEnum.
var (
	AvailabilityEnum_name = map[int32]string{
		0: "AVAIL_UNKNOWN",
		1: "AVAIL_OK",
		2: "AVAIL_LAGGING",
		3: "AVAIL_IMMATURE",
		4: "AVAIL_SYNCING",
		5: "AVAIL_UNAVAILABLE",
	}
	AvailabilityEnum_value = map[string]int32{
		"AVAIL_UNKNOWN":     0,
		"AVAIL_OK":          1,
		"AVAIL_LAGGING":     2,
		"AVAIL_IMMATURE":    3,
		"AVAIL_SYNCING":     4,
		"AVAIL_UNAVAILABLE": 5,
	}
)

func (x AvailabilityEnum) Enum() *AvailabilityEnum {
	p := new(AvailabilityEnum)
	*p = x
	return p
}

func (x AvailabilityEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AvailabilityEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_blockchain_proto_enumTypes[0].Descriptor()
}

func (AvailabilityEnum) Type() protoreflect.EnumType {
	return &file_blockchain_proto_enumTypes[0]
}

func (x AvailabilityEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AvailabilityEnum.Descriptor instead.
func (AvailabilityEnum) EnumDescriptor() ([]byte, []int) {
	return file_blockchain_proto_rawDescGZIP(), []int{0}
}

type Capabilities int32

const (
	Capabilities_CAP_NONE    Capabilities = 0
	Capabilities_CAP_CALLS   Capabilities = 1
	Capabilities_CAP_BALANCE Capabilities = 2
)

// Enum value maps for Capabilities.
var (
	Capabilities_name = map[int32]string{
		0: "CAP_NONE",
		1: "CAP_CALLS",
		2: "CAP_BALANCE",
	}
	Capabilities_value = map[string]int32{
		"CAP_NONE":    0,
		"CAP_CALLS":   1,
		"CAP_BALANCE": 2,
	}
)

func (x Capabilities) Enum() *Capabilities {
	p := new(Capabilities)
	*p = x
	return p
}

func (x Capabilities) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Capabilities) Descriptor() protoreflect.EnumDescriptor {
	return file_blockchain_proto_enumTypes[1].Descriptor()
}

func (Capabilities) Type() protoreflect.EnumType {
	return &file_blockchain_proto_enumTypes[1]
}

func (x Capabilities) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Capabilities.Descriptor instead.
func (Capabilities) EnumDescriptor() ([]byte, []int) {
	return file_blockchain_proto_rawDescGZIP(), []int{1}
}

// *
// The mode of how the fee must be estimated
type FeeEstimationMode int32

const (
	FeeEstimationMode_INVALID FeeEstimationMode = 0
	// Average over last transaction in each block
	FeeEstimationMode_AVG_LAST FeeEstimationMode = 1
	// Average over transaction 5th from the end in each block
	FeeEstimationMode_AVG_T5 FeeEstimationMode = 2
	// Average over transaction 20th from the end in each block
	FeeEstimationMode_AVG_T20 FeeEstimationMode = 3
	// Average over transaction 50th from the end in each block
	FeeEstimationMode_AVG_T50 FeeEstimationMode = 4
	// Minimal fee that would be accepted by every last block
	FeeEstimationMode_MIN_ALWAYS FeeEstimationMode = 5
	// Average over transaction in the middle of each block
	FeeEstimationMode_AVG_MIDDLE FeeEstimationMode = 6
	// Average over transaction in head of each block. Note that for Bitcoin it doesn't count COINBASE tx as top tx.
	FeeEstimationMode_AVG_TOP FeeEstimationMode = 7
)

// Enum value maps for FeeEstimationMode.
var (
	FeeEstimationMode_name = map[int32]string{
		0: "INVALID",
		1: "AVG_LAST",
		2: "AVG_T5",
		3: "AVG_T20",
		4: "AVG_T50",
		5: "MIN_ALWAYS",
		6: "AVG_MIDDLE",
		7: "AVG_TOP",
	}
	FeeEstimationMode_value = map[string]int32{
		"INVALID":    0,
		"AVG_LAST":   1,
		"AVG_T5":     2,
		"AVG_T20":    3,
		"AVG_T50":    4,
		"MIN_ALWAYS": 5,
		"AVG_MIDDLE": 6,
		"AVG_TOP":    7,
	}
)

func (x FeeEstimationMode) Enum() *FeeEstimationMode {
	p := new(FeeEstimationMode)
	*p = x
	return p
}

func (x FeeEstimationMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeeEstimationMode) Descriptor() protoreflect.EnumDescriptor {
	return file_blockchain_proto_enumTypes[2].Descriptor()
}

func (FeeEstimationMode) Type() protoreflect.EnumType {
	return &file_blockchain_proto_enumTypes[2]
}

func (x FeeEstimationMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeeEstimationMode.Descriptor instead.
func (FeeEstimationMode) EnumDescriptor() ([]byte, []int) {
	return file_blockchain_proto_rawDescGZIP(), []int{2}
}

type NativeCallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain           ChainRef          `protobuf:"varint,1,opt,name=chain,proto3,enum=emerald.ChainRef" json:"chain,omitempty"`
	Items           []*NativeCallItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	Selector        *Selector         `protobuf:"bytes,3,opt,name=selector,proto3" json:"selector,omitempty"`
	Quorum          int32             `protobuf:"varint,4,opt,name=quorum,proto3" json:"quorum,omitempty"`
	MinAvailability AvailabilityEnum  `protobuf:"varint,5,opt,name=min_availability,json=minAvailability,proto3,enum=emerald.AvailabilityEnum" json:"min_availability,omitempty"`
}

func (x *NativeCallRequest) Reset() {
	*x = NativeCallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeCallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeCallRequest) ProtoMessage() {}

func (x *NativeCallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeCallRequest.ProtoReflect.Descriptor instead.
func (*NativeCallRequest) Descriptor() ([]byte, []int) {
	return file_blockchain_proto_rawDescGZIP(), []int{0}
}

func (x *NativeCallRequest) GetChain() ChainRef {
	if x != nil {
		return x.Chain
	}
	return ChainRef_CHAIN_UNSPECIFIED
}

func (x *NativeCallRequest) GetItems() []*NativeCallItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *NativeCallRequest) GetSelector() *Selector {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *NativeCallRequest) GetQuorum() int32 {
	if x != nil {
		return x.Quorum
	}
	return 0
}

func (x *NativeCallRequest) GetMinAvailability() AvailabilityEnum {
	if x != nil {
		return x.MinAvailability
	}
	return AvailabilityEnum_AVAIL_UNKNOWN
}

type NativeCallItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Method    string `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
	Payload   []byte `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	Nonce     uint64 `protobuf:"varint,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
	RequestId string `protobuf:"bytes,6,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *NativeCallItem) Reset() {
	*x = NativeCallItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeCallItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeCallItem) ProtoMessage() {}

func (x *NativeCallItem) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeCallItem.ProtoReflect.Descriptor instead.
func (*NativeCallItem) Descriptor() ([]byte, []int) {
	return file_blockchain_proto_rawDescGZIP(), []int{1}
}

func (x *NativeCallItem) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NativeCallItem) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *NativeCallItem) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *NativeCallItem) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *NativeCallItem) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

// *
// Signature for a response
type NativeCallReplySignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// Original nonce value used for the call
	Nonce uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// *
	// Signature value
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// *
	// Key Id used for the signing
	KeyId uint64 `protobuf:"varint,3,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// *
	// Id of the upstream produced the response
	// DEPRECATED - now in reply items
	//
	// Deprecated: Do not use.
	UpstreamId string `protobuf:"bytes,4,opt,name=upstream_id,json=upstreamId,proto3" json:"upstream_id,omitempty"`
}

func (x *NativeCallReplySignature) Reset() {
	*x = NativeCallReplySignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeCallReplySignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeCallReplySignature) ProtoMessage() {}

func (x *NativeCallReplySignature) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeCallReplySignature.ProtoReflect.Descriptor instead.
func (*NativeCallReplySignature) Descriptor() ([]byte, []int) {
	return file_blockchain_proto_rawDescGZIP(), []int{2}
}

func (x *NativeCallReplySignature) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *NativeCallReplySignature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *NativeCallReplySignature) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

// Deprecated: Do not use.
func (x *NativeCallReplySignature) GetUpstreamId() string {
	if x != nil {
		return x.UpstreamId
	}
	return ""
}

type NativeCallReplyItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Succeed      bool   `protobuf:"varint,2,opt,name=succeed,proto3" json:"succeed,omitempty"`
	Payload      []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	ErrorMessage string `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// *
	// Optional signature for the response.
	// Available only when it's configured at the edge dshackle and nonce is provided wit the request.
	Signature  *NativeCallReplySignature `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	ErrorCode  uint32                    `protobuf:"varint,6,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	UpstreamId string                    `protobuf:"bytes,7,opt,name=upstream_id,json=upstreamId,proto3" json:"upstream_id,omitempty"`
	ErrorData  string                    `protobuf:"bytes,8,opt,name=error_data,json=errorData,proto3" json:"error_data,omitempty"`
}

func (x *NativeCallReplyItem) Reset() {
	*x = NativeCallReplyItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeCallReplyItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeCallReplyItem) ProtoMessage() {}

func (x *NativeCallReplyItem) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeCallReplyItem.ProtoReflect.Descriptor instead.
func (*NativeCallReplyItem) Descriptor() ([]byte, []int) {
	return file_blockchain_proto_rawDescGZIP(), []int{3}
}

func (x *NativeCallReplyItem) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NativeCallReplyItem) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *NativeCallReplyItem) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *NativeCallReplyItem) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *NativeCallReplyItem) GetSignature() *NativeCallReplySignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *NativeCallReplyItem) GetErrorCode() uint32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *NativeCallReplyItem) GetUpstreamId() string {
	if x != nil {
		return x.UpstreamId
	}
	return ""
}

func (x *NativeCallReplyItem) GetErrorData() string {
	if x != nil {
		return x.ErrorData
	}
	return ""
}

type NativeSubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain    ChainRef  `protobuf:"varint,1,opt,name=chain,proto3,enum=emerald.ChainRef" json:"chain,omitempty"`
	Method   string    `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	Payload  []byte    `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	Selector *Selector `protobuf:"bytes,4,opt,name=selector,proto3" json:"selector,omitempty"`
	Nonce    uint64    `protobuf:"varint,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *NativeSubscribeRequest) Reset() {
	*x = NativeSubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeSubscribeRequest) ProtoMessage() {}

func (x *NativeSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeSubscribeRequest.ProtoReflect.Descriptor instead.
func (*NativeSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_blockchain_proto_rawDescGZIP(), []int{4}
}

func (x *NativeSubscribeRequest) GetChain() ChainRef {
	if x != nil {
		return x.Chain
	}
	return ChainRef_CHAIN_UNSPECIFIED
}

func (x *NativeSubscribeRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *NativeSubscribeRequest) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *NativeSubscribeRequest) GetSelector() *Selector {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *NativeSubscribeRequest) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

type NativeSubscribeReplyItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload    []byte                    `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Signature  *NativeCallReplySignature `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	UpstreamId string                    `protobuf:"bytes,3,opt,name=upstream_id,json=upstreamId,proto3" json:"upstream_id,omitempty"`
}

func (x *NativeSubscribeReplyItem) Reset() {
	*x = NativeSubscribeReplyItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeSubscribeReplyItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeSubscribeReplyItem) ProtoMessage() {}

func (x *NativeSubscribeReplyItem) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeSubscribeReplyItem.ProtoReflect.Descriptor instead.
func (*NativeSubscribeReplyItem) Descriptor() ([]byte, []int) {
	return file_blockchain_proto_rawDescGZIP(), []int{5}
}

func (x *NativeSubscribeReplyItem) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *NativeSubscribeReplyItem) GetSignature() *NativeCallReplySignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *NativeSubscribeReplyItem) GetUpstreamId() string {
	if x != nil {
		return x.UpstreamId
	}
	return ""
}

type ChainHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain         ChainRef `protobuf:"varint,1,opt,name=chain,proto3,enum=emerald.ChainRef" json:"chain,omitempty"`
	Height        uint64   `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	BlockId       string   `protobuf:"bytes,3,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	Timestamp     uint64   `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Weight        []byte   `protobuf:"bytes,5,opt,name=weight,proto3" json:"weight,omitempty"`
	Reorg         uint64   `protobuf:"varint,6,opt,name=reorg,proto3" json:"reorg,omitempty"`
	ParentBlockId string   `protobuf:"bytes,7,opt,name=parent_block_id,json=parentBlockId,proto3" json:"parent_block_id,omitempty"`
}

func (x *ChainHead) Reset() {
	*x = ChainHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainHead) ProtoMessage() {}

func (x *ChainHead) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainHead.ProtoReflect.Descriptor instead.
func (*ChainHead) Descriptor() ([]byte, []int) {
	return file_blockchain_proto_rawDescGZIP(), []int{6}
}

func (x *ChainHead) GetChain() ChainRef {
	if x != nil {
		return x.Chain
	}
	return ChainRef_CHAIN_UNSPECIFIED
}

func (x *ChainHead) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ChainHead) GetBlockId() string {
	if x != nil {
		return x.BlockId
	}
	return ""
}

func (x *ChainHead) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ChainHead) GetWeight() []byte {
	if x != nil {
		return x.Weight
	}
	return nil
}

func (x *ChainHead) GetReorg() uint64 {
	if x != nil {
		return x.Reorg
	}
	return 0
}

func (x *ChainHead) GetParentBlockId() string {
	if x != nil {
		return x.ParentBlockId
	}
	return ""
}

type TxStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain             ChainRef `protobuf:"varint,1,opt,name=chain,proto3,enum=emerald.ChainRef" json:"chain,omitempty"`
	TxId              string   `protobuf:"bytes,2,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	ConfirmationLimit uint32   `protobuf:"varint,3,opt,name=confirmation_limit,json=confirmationLimit,proto3" json:"confirmation_limit,omitempty"`
}

func (x *TxStatusRequest) Reset() {
	*x = TxStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxStatusRequest) ProtoMessage() {}

func (x *TxStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxStatusRequest.ProtoReflect.Descriptor instead.
func (*TxStatusRequest) Descriptor() ([]byte, []int) {
	return file_blockchain_proto_rawDescGZIP(), []int{7}
}

func (x *TxStatusRequest) GetChain() ChainRef {
	if x != nil {
		return x.Chain
	}
	return ChainRef_CHAIN_UNSPECIFIED
}

func (x *TxStatusRequest) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *TxStatusRequest) GetConfirmationLimit() uint32 {
	if x != nil {
		return x.ConfirmationLimit
	}
	return 0
}

type TxStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxId          string     `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	Broadcasted   bool       `protobuf:"varint,2,opt,name=broadcasted,proto3" json:"broadcasted,omitempty"`
	Mined         bool       `protobuf:"varint,3,opt,name=mined,proto3" json:"mined,omitempty"`
	Block         *BlockInfo `protobuf:"bytes,4,opt,name=block,proto3" json:"block,omitempty"`
	Confirmations uint32     `protobuf:"varint,5,opt,name=confirmations,proto3" json:"confirmations,omitempty"`
}

func (x *TxStatus) Reset() {
	*x = TxStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxStatus) ProtoMessage() {}

func (x *TxStatus) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxStatus.ProtoReflect.Descriptor instead.
func (*TxStatus) Descriptor() ([]byte, []int) {
	return file_blockchain_proto_rawDescGZIP(), []int{8}
}

func (x *TxStatus) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *TxStatus) GetBroadcasted() bool {
	if x != nil {
		return x.Broadcasted
	}
	return false
}

func (x *TxStatus) GetMined() bool {
	if x != nil {
		return x.Mined
	}
	return false
}

func (x *TxStatus) GetBlock() *BlockInfo {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *TxStatus) GetConfirmations() uint32 {
	if x != nil {
		return x.Confirmations
	}
	return 0
}

type BalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asset       *Asset      `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	Address     *AnyAddress `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	IncludeUtxo bool        `protobuf:"varint,3,opt,name=include_utxo,json=includeUtxo,proto3" json:"include_utxo,omitempty"`
}

func (x *BalanceRequest) Reset() {
	*x = BalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceRequest) ProtoMessage() {}

func (x *BalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceRequest.ProtoReflect.Descriptor instead.
func (*BalanceRequest) Descriptor() ([]byte, []int) {
	return file_blockchain_proto_rawDescGZIP(), []int{9}
}

func (x *BalanceRequest) GetAsset() *Asset {
	if x != nil {
		return x.Asset
	}
	return nil
}

func (x *BalanceRequest) GetAddress() *AnyAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *BalanceRequest) GetIncludeUtxo() bool {
	if x != nil {
		return x.IncludeUtxo
	}
	return false
}

type AddressBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asset     *Asset         `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	Address   *SingleAddress `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Balance   string         `protobuf:"bytes,3,opt,name=balance,proto3" json:"balance,omitempty"`
	Confirmed bool           `protobuf:"varint,4,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
	Utxo      []*Utxo        `protobuf:"bytes,5,rep,name=utxo,proto3" json:"utxo,omitempty"`
}

func (x *AddressBalance) Reset() {
	*x = AddressBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressBalance) ProtoMessage() {}

func (x *AddressBalance) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressBalance.ProtoReflect.Descriptor instead.
func (*AddressBalance) Descriptor() ([]byte, []int) {
	return file_blockchain_proto_rawDescGZIP(), []int{10}
}

func (x *AddressBalance) GetAsset() *Asset {
	if x != nil {
		return x.Asset
	}
	return nil
}

func (x *AddressBalance) GetAddress() *SingleAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *AddressBalance) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *AddressBalance) GetConfirmed() bool {
	if x != nil {
		return x.Confirmed
	}
	return false
}

func (x *AddressBalance) GetUtxo() []*Utxo {
	if x != nil {
		return x.Utxo
	}
	return nil
}

type Utxo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxId    string `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	Index   uint64 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Balance string `protobuf:"bytes,3,opt,name=balance,proto3" json:"balance,omitempty"`
	Spent   bool   `protobuf:"varint,4,opt,name=spent,proto3" json:"spent,omitempty"`
}

func (x *Utxo) Reset() {
	*x = Utxo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Utxo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Utxo) ProtoMessage() {}

func (x *Utxo) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Utxo.ProtoReflect.Descriptor instead.
func (*Utxo) Descriptor() ([]byte, []int) {
	return file_blockchain_proto_rawDescGZIP(), []int{11}
}

func (x *Utxo) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *Utxo) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Utxo) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *Utxo) GetSpent() bool {
	if x != nil {
		return x.Spent
	}
	return false
}

type SubscribeNodeStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timespan uint64 `protobuf:"varint,1,opt,name=timespan,proto3" json:"timespan,omitempty"`
	// optional param for tracing
	TraceId string `protobuf:"bytes,2,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
}

func (x *SubscribeNodeStatusRequest) Reset() {
	*x = SubscribeNodeStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeNodeStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeNodeStatusRequest) ProtoMessage() {}

func (x *SubscribeNodeStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeNodeStatusRequest.ProtoReflect.Descriptor instead.
func (*SubscribeNodeStatusRequest) Descriptor() ([]byte, []int) {
	return file_blockchain_proto_rawDescGZIP(), []int{12}
}

func (x *SubscribeNodeStatusRequest) GetTimespan() uint64 {
	if x != nil {
		return x.Timespan
	}
	return 0
}

func (x *SubscribeNodeStatusRequest) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

type NodeStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId      string           `protobuf:"bytes,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Description *NodeDescription `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Status      *NodeStatus      `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *NodeStatusResponse) Reset() {
	*x = NodeStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeStatusResponse) ProtoMessage() {}

func (x *NodeStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeStatusResponse.ProtoReflect.Descriptor instead.
func (*NodeStatusResponse) Descriptor() ([]byte, []int) {
	return file_blockchain_proto_rawDescGZIP(), []int{13}
}

func (x *NodeStatusResponse) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *NodeStatusResponse) GetDescription() *NodeDescription {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *NodeStatusResponse) GetStatus() *NodeStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type NodeDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain                  ChainRef      `protobuf:"varint,1,opt,name=chain,proto3,enum=emerald.ChainRef" json:"chain,omitempty"`
	NodeLabels             []*NodeLabels `protobuf:"bytes,2,rep,name=nodeLabels,proto3" json:"nodeLabels,omitempty"`
	SupportedMethods       []string      `protobuf:"bytes,3,rep,name=supportedMethods,proto3" json:"supportedMethods,omitempty"`
	NodeId                 int32         `protobuf:"varint,4,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	SupportedSubscriptions []string      `protobuf:"bytes,5,rep,name=supportedSubscriptions,proto3" json:"supportedSubscriptions,omitempty"`
	NodeBuildInfo          *BuildInfo    `protobuf:"bytes,6,opt,name=node_build_info,json=nodeBuildInfo,proto3" json:"node_build_info,omitempty"`
}

func (x *NodeDescription) Reset() {
	*x = NodeDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeDescription) ProtoMessage() {}

func (x *NodeDescription) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeDescription.ProtoReflect.Descriptor instead.
func (*NodeDescription) Descriptor() ([]byte, []int) {
	return file_blockchain_proto_rawDescGZIP(), []int{14}
}

func (x *NodeDescription) GetChain() ChainRef {
	if x != nil {
		return x.Chain
	}
	return ChainRef_CHAIN_UNSPECIFIED
}

func (x *NodeDescription) GetNodeLabels() []*NodeLabels {
	if x != nil {
		return x.NodeLabels
	}
	return nil
}

func (x *NodeDescription) GetSupportedMethods() []string {
	if x != nil {
		return x.SupportedMethods
	}
	return nil
}

func (x *NodeDescription) GetNodeId() int32 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *NodeDescription) GetSupportedSubscriptions() []string {
	if x != nil {
		return x.SupportedSubscriptions
	}
	return nil
}

func (x *NodeDescription) GetNodeBuildInfo() *BuildInfo {
	if x != nil {
		return x.NodeBuildInfo
	}
	return nil
}

type NodeLabels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels []*Label `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *NodeLabels) Reset() {
	*x = NodeLabels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeLabels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeLabels) ProtoMessage() {}

func (x *NodeLabels) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeLabels.ProtoReflect.Descriptor instead.
func (*NodeLabels) Descriptor() ([]byte, []int) {
	return file_blockchain_proto_rawDescGZIP(), []int{15}
}

func (x *NodeLabels) GetLabels() []*Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

type NodeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentHeight int64            `protobuf:"varint,1,opt,name=currentHeight,proto3" json:"currentHeight,omitempty"`
	Availability  AvailabilityEnum `protobuf:"varint,2,opt,name=availability,proto3,enum=emerald.AvailabilityEnum" json:"availability,omitempty"`
}

func (x *NodeStatus) Reset() {
	*x = NodeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeStatus) ProtoMessage() {}

func (x *NodeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeStatus.ProtoReflect.Descriptor instead.
func (*NodeStatus) Descriptor() ([]byte, []int) {
	return file_blockchain_proto_rawDescGZIP(), []int{16}
}

func (x *NodeStatus) GetCurrentHeight() int64 {
	if x != nil {
		return x.CurrentHeight
	}
	return 0
}

func (x *NodeStatus) GetAvailability() AvailabilityEnum {
	if x != nil {
		return x.Availability
	}
	return AvailabilityEnum_AVAIL_UNKNOWN
}

type DescribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DescribeRequest) Reset() {
	*x = DescribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeRequest) ProtoMessage() {}

func (x *DescribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeRequest.ProtoReflect.Descriptor instead.
func (*DescribeRequest) Descriptor() ([]byte, []int) {
	return file_blockchain_proto_rawDescGZIP(), []int{17}
}

type DescribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chains    []*DescribeChain `protobuf:"bytes,1,rep,name=chains,proto3" json:"chains,omitempty"`
	BuildInfo *BuildInfo       `protobuf:"bytes,2,opt,name=build_info,json=buildInfo,proto3" json:"build_info,omitempty"`
}

func (x *DescribeResponse) Reset() {
	*x = DescribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeResponse) ProtoMessage() {}

func (x *DescribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeResponse.ProtoReflect.Descriptor instead.
func (*DescribeResponse) Descriptor() ([]byte, []int) {
	return file_blockchain_proto_rawDescGZIP(), []int{18}
}

func (x *DescribeResponse) GetChains() []*DescribeChain {
	if x != nil {
		return x.Chains
	}
	return nil
}

func (x *DescribeResponse) GetBuildInfo() *BuildInfo {
	if x != nil {
		return x.BuildInfo
	}
	return nil
}

type DescribeChain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain  ChainRef       `protobuf:"varint,1,opt,name=chain,proto3,enum=emerald.ChainRef" json:"chain,omitempty"`
	Status *ChainStatus   `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Nodes  []*NodeDetails `protobuf:"bytes,3,rep,name=nodes,proto3" json:"nodes,omitempty"`
	// *
	// List of method available through NativeCall
	SupportedMethods []string       `protobuf:"bytes,4,rep,name=supportedMethods,proto3" json:"supportedMethods,omitempty"`
	ExcludedMethods  []string       `protobuf:"bytes,5,rep,name=excludedMethods,proto3" json:"excludedMethods,omitempty"`
	Capabilities     []Capabilities `protobuf:"varint,6,rep,packed,name=capabilities,proto3,enum=emerald.Capabilities" json:"capabilities,omitempty"`
	CurrentHeight    int64          `protobuf:"varint,7,opt,name=currentHeight,proto3" json:"currentHeight,omitempty"`
	// *
	// List of subscriptions available through NativeSubscribe
	SupportedSubscriptions []string `protobuf:"bytes,8,rep,name=supportedSubscriptions,proto3" json:"supportedSubscriptions,omitempty"`
}

func (x *DescribeChain) Reset() {
	*x = DescribeChain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeChain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeChain) ProtoMessage() {}

func (x *DescribeChain) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeChain.ProtoReflect.Descriptor instead.
func (*DescribeChain) Descriptor() ([]byte, []int) {
	return file_blockchain_proto_rawDescGZIP(), []int{19}
}

func (x *DescribeChain) GetChain() ChainRef {
	if x != nil {
		return x.Chain
	}
	return ChainRef_CHAIN_UNSPECIFIED
}

func (x *DescribeChain) GetStatus() *ChainStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DescribeChain) GetNodes() []*NodeDetails {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *DescribeChain) GetSupportedMethods() []string {
	if x != nil {
		return x.SupportedMethods
	}
	return nil
}

func (x *DescribeChain) GetExcludedMethods() []string {
	if x != nil {
		return x.ExcludedMethods
	}
	return nil
}

func (x *DescribeChain) GetCapabilities() []Capabilities {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *DescribeChain) GetCurrentHeight() int64 {
	if x != nil {
		return x.CurrentHeight
	}
	return 0
}

func (x *DescribeChain) GetSupportedSubscriptions() []string {
	if x != nil {
		return x.SupportedSubscriptions
	}
	return nil
}

type BuildInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *BuildInfo) Reset() {
	*x = BuildInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildInfo) ProtoMessage() {}

func (x *BuildInfo) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildInfo.ProtoReflect.Descriptor instead.
func (*BuildInfo) Descriptor() ([]byte, []int) {
	return file_blockchain_proto_rawDescGZIP(), []int{20}
}

func (x *BuildInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type StatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chains []ChainRef `protobuf:"varint,1,rep,packed,name=chains,proto3,enum=emerald.ChainRef" json:"chains,omitempty"`
}

func (x *StatusRequest) Reset() {
	*x = StatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusRequest) ProtoMessage() {}

func (x *StatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusRequest.ProtoReflect.Descriptor instead.
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return file_blockchain_proto_rawDescGZIP(), []int{21}
}

func (x *StatusRequest) GetChains() []ChainRef {
	if x != nil {
		return x.Chains
	}
	return nil
}

type ChainStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain        ChainRef         `protobuf:"varint,1,opt,name=chain,proto3,enum=emerald.ChainRef" json:"chain,omitempty"`
	Availability AvailabilityEnum `protobuf:"varint,2,opt,name=availability,proto3,enum=emerald.AvailabilityEnum" json:"availability,omitempty"`
	Quorum       uint32           `protobuf:"varint,3,opt,name=quorum,proto3" json:"quorum,omitempty"`
}

func (x *ChainStatus) Reset() {
	*x = ChainStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainStatus) ProtoMessage() {}

func (x *ChainStatus) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainStatus.ProtoReflect.Descriptor instead.
func (*ChainStatus) Descriptor() ([]byte, []int) {
	return file_blockchain_proto_rawDescGZIP(), []int{22}
}

func (x *ChainStatus) GetChain() ChainRef {
	if x != nil {
		return x.Chain
	}
	return ChainRef_CHAIN_UNSPECIFIED
}

func (x *ChainStatus) GetAvailability() AvailabilityEnum {
	if x != nil {
		return x.Availability
	}
	return AvailabilityEnum_AVAIL_UNKNOWN
}

func (x *ChainStatus) GetQuorum() uint32 {
	if x != nil {
		return x.Quorum
	}
	return 0
}

type NodeDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quorum uint32   `protobuf:"varint,1,opt,name=quorum,proto3" json:"quorum,omitempty"`
	Labels []*Label `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *NodeDetails) Reset() {
	*x = NodeDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeDetails) ProtoMessage() {}

func (x *NodeDetails) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeDetails.ProtoReflect.Descriptor instead.
func (*NodeDetails) Descriptor() ([]byte, []int) {
	return file_blockchain_proto_rawDescGZIP(), []int{23}
}

func (x *NodeDetails) GetQuorum() uint32 {
	if x != nil {
		return x.Quorum
	}
	return 0
}

func (x *NodeDetails) GetLabels() []*Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

type Label struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Label) Reset() {
	*x = Label{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Label) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Label) ProtoMessage() {}

func (x *Label) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Label.ProtoReflect.Descriptor instead.
func (*Label) Descriptor() ([]byte, []int) {
	return file_blockchain_proto_rawDescGZIP(), []int{24}
}

func (x *Label) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Label) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Selector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SelectorType:
	//
	//	*Selector_LabelSelector
	//	*Selector_OrSelector
	//	*Selector_AndSelector
	//	*Selector_NotSelector
	//	*Selector_ExistsSelector
	SelectorType      isSelector_SelectorType `protobuf_oneof:"selector_type"`
	ShouldBeForwarded bool                    `protobuf:"varint,100,opt,name=should_be_forwarded,json=shouldBeForwarded,proto3" json:"should_be_forwarded,omitempty"`
}

func (x *Selector) Reset() {
	*x = Selector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Selector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Selector) ProtoMessage() {}

func (x *Selector) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Selector.ProtoReflect.Descriptor instead.
func (*Selector) Descriptor() ([]byte, []int) {
	return file_blockchain_proto_rawDescGZIP(), []int{25}
}

func (m *Selector) GetSelectorType() isSelector_SelectorType {
	if m != nil {
		return m.SelectorType
	}
	return nil
}

func (x *Selector) GetLabelSelector() *LabelSelector {
	if x, ok := x.GetSelectorType().(*Selector_LabelSelector); ok {
		return x.LabelSelector
	}
	return nil
}

func (x *Selector) GetOrSelector() *OrSelector {
	if x, ok := x.GetSelectorType().(*Selector_OrSelector); ok {
		return x.OrSelector
	}
	return nil
}

func (x *Selector) GetAndSelector() *AndSelector {
	if x, ok := x.GetSelectorType().(*Selector_AndSelector); ok {
		return x.AndSelector
	}
	return nil
}

func (x *Selector) GetNotSelector() *NotSelector {
	if x, ok := x.GetSelectorType().(*Selector_NotSelector); ok {
		return x.NotSelector
	}
	return nil
}

func (x *Selector) GetExistsSelector() *ExistsSelector {
	if x, ok := x.GetSelectorType().(*Selector_ExistsSelector); ok {
		return x.ExistsSelector
	}
	return nil
}

func (x *Selector) GetShouldBeForwarded() bool {
	if x != nil {
		return x.ShouldBeForwarded
	}
	return false
}

type isSelector_SelectorType interface {
	isSelector_SelectorType()
}

type Selector_LabelSelector struct {
	LabelSelector *LabelSelector `protobuf:"bytes,1,opt,name=labelSelector,proto3,oneof"`
}

type Selector_OrSelector struct {
	OrSelector *OrSelector `protobuf:"bytes,2,opt,name=orSelector,proto3,oneof"`
}

type Selector_AndSelector struct {
	AndSelector *AndSelector `protobuf:"bytes,3,opt,name=andSelector,proto3,oneof"`
}

type Selector_NotSelector struct {
	NotSelector *NotSelector `protobuf:"bytes,4,opt,name=notSelector,proto3,oneof"`
}

type Selector_ExistsSelector struct {
	ExistsSelector *ExistsSelector `protobuf:"bytes,5,opt,name=existsSelector,proto3,oneof"`
}

func (*Selector_LabelSelector) isSelector_SelectorType() {}

func (*Selector_OrSelector) isSelector_SelectorType() {}

func (*Selector_AndSelector) isSelector_SelectorType() {}

func (*Selector_NotSelector) isSelector_SelectorType() {}

func (*Selector_ExistsSelector) isSelector_SelectorType() {}

type LabelSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value []string `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *LabelSelector) Reset() {
	*x = LabelSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelSelector) ProtoMessage() {}

func (x *LabelSelector) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelSelector.ProtoReflect.Descriptor instead.
func (*LabelSelector) Descriptor() ([]byte, []int) {
	return file_blockchain_proto_rawDescGZIP(), []int{26}
}

func (x *LabelSelector) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LabelSelector) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

type OrSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selectors []*Selector `protobuf:"bytes,1,rep,name=selectors,proto3" json:"selectors,omitempty"`
}

func (x *OrSelector) Reset() {
	*x = OrSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrSelector) ProtoMessage() {}

func (x *OrSelector) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrSelector.ProtoReflect.Descriptor instead.
func (*OrSelector) Descriptor() ([]byte, []int) {
	return file_blockchain_proto_rawDescGZIP(), []int{27}
}

func (x *OrSelector) GetSelectors() []*Selector {
	if x != nil {
		return x.Selectors
	}
	return nil
}

type AndSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selectors []*Selector `protobuf:"bytes,1,rep,name=selectors,proto3" json:"selectors,omitempty"`
}

func (x *AndSelector) Reset() {
	*x = AndSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndSelector) ProtoMessage() {}

func (x *AndSelector) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndSelector.ProtoReflect.Descriptor instead.
func (*AndSelector) Descriptor() ([]byte, []int) {
	return file_blockchain_proto_rawDescGZIP(), []int{28}
}

func (x *AndSelector) GetSelectors() []*Selector {
	if x != nil {
		return x.Selectors
	}
	return nil
}

type NotSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selector *Selector `protobuf:"bytes,1,opt,name=selector,proto3" json:"selector,omitempty"`
}

func (x *NotSelector) Reset() {
	*x = NotSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotSelector) ProtoMessage() {}

func (x *NotSelector) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotSelector.ProtoReflect.Descriptor instead.
func (*NotSelector) Descriptor() ([]byte, []int) {
	return file_blockchain_proto_rawDescGZIP(), []int{29}
}

func (x *NotSelector) GetSelector() *Selector {
	if x != nil {
		return x.Selector
	}
	return nil
}

type ExistsSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ExistsSelector) Reset() {
	*x = ExistsSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistsSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistsSelector) ProtoMessage() {}

func (x *ExistsSelector) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistsSelector.ProtoReflect.Descriptor instead.
func (*ExistsSelector) Descriptor() ([]byte, []int) {
	return file_blockchain_proto_rawDescGZIP(), []int{30}
}

func (x *ExistsSelector) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// *
// Request for Fee Estimation Service
type EstimateFeeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Target chain
	Chain ChainRef `protobuf:"varint,1,opt,name=chain,proto3,enum=emerald.ChainRef" json:"chain,omitempty"`
	// The way how the fee should be estimated
	Mode FeeEstimationMode `protobuf:"varint,2,opt,name=mode,proto3,enum=emerald.FeeEstimationMode" json:"mode,omitempty"`
	// How many blocks the server is supposed to use to estimate current fee. Note that the server may use value, depending on configuration
	Blocks uint32 `protobuf:"varint,3,opt,name=blocks,proto3" json:"blocks,omitempty"`
}

func (x *EstimateFeeRequest) Reset() {
	*x = EstimateFeeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstimateFeeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimateFeeRequest) ProtoMessage() {}

func (x *EstimateFeeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimateFeeRequest.ProtoReflect.Descriptor instead.
func (*EstimateFeeRequest) Descriptor() ([]byte, []int) {
	return file_blockchain_proto_rawDescGZIP(), []int{31}
}

func (x *EstimateFeeRequest) GetChain() ChainRef {
	if x != nil {
		return x.Chain
	}
	return ChainRef_CHAIN_UNSPECIFIED
}

func (x *EstimateFeeRequest) GetMode() FeeEstimationMode {
	if x != nil {
		return x.Mode
	}
	return FeeEstimationMode_INVALID
}

func (x *EstimateFeeRequest) GetBlocks() uint32 {
	if x != nil {
		return x.Blocks
	}
	return 0
}

// *
// Responset for Fee Estimation Service
type EstimateFeeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// May return different struct, depending on the blockchain
	//
	// Types that are assignable to FeeType:
	//
	//	*EstimateFeeResponse_EthereumStd
	//	*EstimateFeeResponse_EthereumExtended
	//	*EstimateFeeResponse_BitcoinStd
	FeeType isEstimateFeeResponse_FeeType `protobuf_oneof:"fee_type"`
}

func (x *EstimateFeeResponse) Reset() {
	*x = EstimateFeeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstimateFeeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimateFeeResponse) ProtoMessage() {}

func (x *EstimateFeeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimateFeeResponse.ProtoReflect.Descriptor instead.
func (*EstimateFeeResponse) Descriptor() ([]byte, []int) {
	return file_blockchain_proto_rawDescGZIP(), []int{32}
}

func (m *EstimateFeeResponse) GetFeeType() isEstimateFeeResponse_FeeType {
	if m != nil {
		return m.FeeType
	}
	return nil
}

func (x *EstimateFeeResponse) GetEthereumStd() *EthereumStdFees {
	if x, ok := x.GetFeeType().(*EstimateFeeResponse_EthereumStd); ok {
		return x.EthereumStd
	}
	return nil
}

func (x *EstimateFeeResponse) GetEthereumExtended() *EthereumExtFees {
	if x, ok := x.GetFeeType().(*EstimateFeeResponse_EthereumExtended); ok {
		return x.EthereumExtended
	}
	return nil
}

func (x *EstimateFeeResponse) GetBitcoinStd() *BitcoinStdFees {
	if x, ok := x.GetFeeType().(*EstimateFeeResponse_BitcoinStd); ok {
		return x.BitcoinStd
	}
	return nil
}

type isEstimateFeeResponse_FeeType interface {
	isEstimateFeeResponse_FeeType()
}

type EstimateFeeResponse_EthereumStd struct {
	// Standard Ethereum Fee, supported by majority of forks and by Ethereum Mainnet before EIP-1559
	EthereumStd *EthereumStdFees `protobuf:"bytes,1,opt,name=ethereumStd,proto3,oneof"`
}

type EstimateFeeResponse_EthereumExtended struct {
	// Ethereum Fee for EIP-1559 compatible forks
	EthereumExtended *EthereumExtFees `protobuf:"bytes,2,opt,name=ethereumExtended,proto3,oneof"`
}

type EstimateFeeResponse_BitcoinStd struct {
	// Standard Bitcoin Fee
	BitcoinStd *BitcoinStdFees `protobuf:"bytes,3,opt,name=bitcoinStd,proto3,oneof"`
}

func (*EstimateFeeResponse_EthereumStd) isEstimateFeeResponse_FeeType() {}

func (*EstimateFeeResponse_EthereumExtended) isEstimateFeeResponse_FeeType() {}

func (*EstimateFeeResponse_BitcoinStd) isEstimateFeeResponse_FeeType() {}

// *
// Standard Ethereum Fee, supported by majority of forks and by Ethereum Mainnet before EIP-1559
type EthereumStdFees struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Big Number encoded as string. Fee value in Wei
	Fee string `protobuf:"bytes,1,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *EthereumStdFees) Reset() {
	*x = EthereumStdFees{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumStdFees) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumStdFees) ProtoMessage() {}

func (x *EthereumStdFees) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumStdFees.ProtoReflect.Descriptor instead.
func (*EthereumStdFees) Descriptor() ([]byte, []int) {
	return file_blockchain_proto_rawDescGZIP(), []int{33}
}

func (x *EthereumStdFees) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

// *
// Ethereum Fee for EIP-1559 compatible forks
type EthereumExtFees struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Big Number encoded as string. Estimated fee that expected to be actually paid. I.e. it's the Base Fee + Priority Fee
	Expect string `protobuf:"bytes,1,opt,name=expect,proto3" json:"expect,omitempty"`
	// Big Number encoded as string. Priority Fee in Wei
	Priority string `protobuf:"bytes,2,opt,name=priority,proto3" json:"priority,omitempty"`
	// Big Number encoded as string. Max Fee value in Wei. Note that it only indicates the current preference, and the actual Max may be significantly lower, depending on the usage scenario.
	Max string `protobuf:"bytes,3,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *EthereumExtFees) Reset() {
	*x = EthereumExtFees{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumExtFees) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumExtFees) ProtoMessage() {}

func (x *EthereumExtFees) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumExtFees.ProtoReflect.Descriptor instead.
func (*EthereumExtFees) Descriptor() ([]byte, []int) {
	return file_blockchain_proto_rawDescGZIP(), []int{34}
}

func (x *EthereumExtFees) GetExpect() string {
	if x != nil {
		return x.Expect
	}
	return ""
}

func (x *EthereumExtFees) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *EthereumExtFees) GetMax() string {
	if x != nil {
		return x.Max
	}
	return ""
}

// *
// Standard Bitcoin Fee
type BitcoinStdFees struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fee in Satoshi per Kilobyte. Note that the actual fee calculation MUST divide it by 1024 at the last step to get a fair fee.
	SatPerKb uint64 `protobuf:"varint,1,opt,name=satPerKb,proto3" json:"satPerKb,omitempty"`
}

func (x *BitcoinStdFees) Reset() {
	*x = BitcoinStdFees{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitcoinStdFees) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitcoinStdFees) ProtoMessage() {}

func (x *BitcoinStdFees) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitcoinStdFees.ProtoReflect.Descriptor instead.
func (*BitcoinStdFees) Descriptor() ([]byte, []int) {
	return file_blockchain_proto_rawDescGZIP(), []int{35}
}

func (x *BitcoinStdFees) GetSatPerKb() uint64 {
	if x != nil {
		return x.SatPerKb
	}
	return 0
}

var File_blockchain_proto protoreflect.FileDescriptor

var file_blockchain_proto_rawDesc = []byte{
	0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x07, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x1a, 0x0c, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf8, 0x01, 0x0a, 0x11, 0x4e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x27, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65,
	0x66, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c,
	0x64, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x6d, 0x65, 0x72,
	0x61, 0x6c, 0x64, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x12, 0x44,
	0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61,
	0x6c, 0x64, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x22, 0x87, 0x01, 0x0a, 0x0e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x8a,
	0x01, 0x0a, 0x18, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0b, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x0a, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x9e, 0x02, 0x0a, 0x13,
	0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0xb8, 0x01, 0x0a,
	0x16, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64,
	0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x66, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x2d, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x18, 0x4e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3f,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x4e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x22, 0xdb, 0x01, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x12, 0x27,
	0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e,
	0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x66,
	0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x6f, 0x72, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x72, 0x65, 0x6f, 0x72, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x22, 0x7e,
	0x0a, 0x0f, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x27, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x52, 0x65, 0x66, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12,
	0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xa7,
	0x01, 0x0a, 0x08, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x74,
	0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c,
	0x64, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x0e, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6d, 0x65,
	0x72, 0x61, 0x6c, 0x64, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x12, 0x2d, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x41, 0x6e, 0x79,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x75, 0x74, 0x78, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x55,
	0x74, 0x78, 0x6f, 0x22, 0xc3, 0x01, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x75, 0x74, 0x78, 0x6f, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x55,
	0x74, 0x78, 0x6f, 0x52, 0x04, 0x75, 0x74, 0x78, 0x6f, 0x22, 0x61, 0x0a, 0x04, 0x55, 0x74, 0x78,
	0x6f, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x22, 0x53, 0x0a, 0x1a,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x22, 0x95, 0x01, 0x0a, 0x12, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x12, 0x3a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65,
	0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa7, 0x02, 0x0a, 0x0f, 0x4e, 0x6f,
	0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a,
	0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x65,
	0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x66, 0x52,
	0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x33, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x6d, 0x65,
	0x72, 0x61, 0x6c, 0x64, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52,
	0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x36, 0x0a, 0x16, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x16, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x34, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x26, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x71, 0x0a, 0x0a, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3d, 0x0a,
	0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0c,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x11, 0x0a, 0x0f,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x75, 0x0a, 0x10, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x06, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x0a, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c,
	0x64, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x81, 0x03, 0x0a, 0x0d, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c,
	0x64, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x66, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2a, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x73, 0x12, 0x39, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c,
	0x64, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0c,
	0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x16, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x25, 0x0a, 0x09, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x3a, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x52, 0x65, 0x66, 0x52, 0x06, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x22, 0x8d, 0x01,
	0x0a, 0x0b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a,
	0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x65,
	0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x66, 0x52,
	0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x3d, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x65,
	0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x22, 0x4d, 0x0a,
	0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x71, 0x75,
	0x6f, 0x72, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x31, 0x0a, 0x05,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xf9, 0x02, 0x0a, 0x08, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x0d,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x0a,
	0x6f, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x4f, 0x72, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x0b, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61,
	0x6c, 0x64, 0x2e, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x0b, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x38, 0x0a,
	0x0b, 0x6e, 0x6f, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x4e, 0x6f, 0x74,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x6f, 0x74, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x41, 0x0a, 0x0e, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x68,
	0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x42,
	0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x39, 0x0a, 0x0d, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3d, 0x0a, 0x0a, 0x4f, 0x72, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c,
	0x64, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x3e, 0x0a, 0x0b, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c,
	0x64, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x3c, 0x0a, 0x0b, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64,
	0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x22, 0x24, 0x0a, 0x0e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x12, 0x45, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x27, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52,
	0x65, 0x66, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c,
	0x64, 0x2e, 0x46, 0x65, 0x65, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x22, 0xe2, 0x01, 0x0a, 0x13, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x46, 0x65,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x75, 0x6d, 0x53, 0x74, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75,
	0x6d, 0x53, 0x74, 0x64, 0x46, 0x65, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x75, 0x6d, 0x53, 0x74, 0x64, 0x12, 0x46, 0x0a, 0x10, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x65, 0x75, 0x6d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x75, 0x6d, 0x45, 0x78, 0x74, 0x46, 0x65, 0x65, 0x73, 0x48, 0x00, 0x52, 0x10, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12,
	0x39, 0x0a, 0x0a, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x74, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x42, 0x69,
	0x74, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x74, 0x64, 0x46, 0x65, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0a,
	0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x74, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x66, 0x65,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x23, 0x0a, 0x0f, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65,
	0x75, 0x6d, 0x53, 0x74, 0x64, 0x46, 0x65, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x65, 0x65, 0x22, 0x57, 0x0a, 0x0f, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x45, 0x78, 0x74, 0x46, 0x65, 0x65, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x61, 0x78, 0x22, 0x2c, 0x0a, 0x0e, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x53,
	0x74, 0x64, 0x46, 0x65, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x61, 0x74, 0x50, 0x65, 0x72,
	0x4b, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x61, 0x74, 0x50, 0x65, 0x72,
	0x4b, 0x62, 0x2a, 0x84, 0x01, 0x0a, 0x10, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x56, 0x41, 0x49, 0x4c,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x56,
	0x41, 0x49, 0x4c, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x56, 0x41, 0x49,
	0x4c, 0x5f, 0x4c, 0x41, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x41,
	0x56, 0x41, 0x49, 0x4c, 0x5f, 0x49, 0x4d, 0x4d, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x03, 0x12,
	0x11, 0x0a, 0x0d, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x49, 0x4e, 0x47,
	0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x4e, 0x41, 0x56,
	0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x05, 0x2a, 0x3c, 0x0a, 0x0c, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x50,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x50, 0x5f, 0x43,
	0x41, 0x4c, 0x4c, 0x53, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x41, 0x50, 0x5f, 0x42, 0x41,
	0x4c, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x2a, 0x81, 0x01, 0x0a, 0x11, 0x46, 0x65, 0x65, 0x45,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x56,
	0x47, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x56, 0x47, 0x5f,
	0x54, 0x35, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x56, 0x47, 0x5f, 0x54, 0x32, 0x30, 0x10,
	0x03, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x56, 0x47, 0x5f, 0x54, 0x35, 0x30, 0x10, 0x04, 0x12, 0x0e,
	0x0a, 0x0a, 0x4d, 0x49, 0x4e, 0x5f, 0x41, 0x4c, 0x57, 0x41, 0x59, 0x53, 0x10, 0x05, 0x12, 0x0e,
	0x0a, 0x0a, 0x41, 0x56, 0x47, 0x5f, 0x4d, 0x49, 0x44, 0x44, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x0b,
	0x0a, 0x07, 0x41, 0x56, 0x47, 0x5f, 0x54, 0x4f, 0x50, 0x10, 0x07, 0x32, 0xf1, 0x05, 0x0a, 0x0a,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x37, 0x0a, 0x0d, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x0e, 0x2e, 0x65, 0x6d,
	0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x1a, 0x12, 0x2e, 0x65, 0x6d,
	0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x48, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x17, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c,
	0x64, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x17, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x44, 0x0a,
	0x11, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x18, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x54, 0x78, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x65,
	0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x42, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x17, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x65, 0x6d, 0x65,
	0x72, 0x61, 0x6c, 0x64, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x4a, 0x0a, 0x0b, 0x45, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x12, 0x1b, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64,
	0x2e, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x45, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0a, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x1a, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x4e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x59, 0x0a, 0x0f, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x12, 0x1f, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x4e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x4e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x00, 0x30, 0x01, 0x12, 0x41, 0x0a, 0x08, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x18, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64,
	0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a,
	0x0f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x16, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61,
	0x6c, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x5b, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x2e, 0x65, 0x6d, 0x65, 0x72,
	0x61, 0x6c, 0x64, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42,
	0x19, 0x0a, 0x17, 0x69, 0x6f, 0x2e, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x70, 0x61, 0x79,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_blockchain_proto_rawDescOnce sync.Once
	file_blockchain_proto_rawDescData = file_blockchain_proto_rawDesc
)

func file_blockchain_proto_rawDescGZIP() []byte {
	file_blockchain_proto_rawDescOnce.Do(func() {
		file_blockchain_proto_rawDescData = protoimpl.X.CompressGZIP(file_blockchain_proto_rawDescData)
	})
	return file_blockchain_proto_rawDescData
}

var file_blockchain_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_blockchain_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_blockchain_proto_goTypes = []interface{}{
	(AvailabilityEnum)(0),              // 0: emerald.AvailabilityEnum
	(Capabilities)(0),                  // 1: emerald.Capabilities
	(FeeEstimationMode)(0),             // 2: emerald.FeeEstimationMode
	(*NativeCallRequest)(nil),          // 3: emerald.NativeCallRequest
	(*NativeCallItem)(nil),             // 4: emerald.NativeCallItem
	(*NativeCallReplySignature)(nil),   // 5: emerald.NativeCallReplySignature
	(*NativeCallReplyItem)(nil),        // 6: emerald.NativeCallReplyItem
	(*NativeSubscribeRequest)(nil),     // 7: emerald.NativeSubscribeRequest
	(*NativeSubscribeReplyItem)(nil),   // 8: emerald.NativeSubscribeReplyItem
	(*ChainHead)(nil),                  // 9: emerald.ChainHead
	(*TxStatusRequest)(nil),            // 10: emerald.TxStatusRequest
	(*TxStatus)(nil),                   // 11: emerald.TxStatus
	(*BalanceRequest)(nil),             // 12: emerald.BalanceRequest
	(*AddressBalance)(nil),             // 13: emerald.AddressBalance
	(*Utxo)(nil),                       // 14: emerald.Utxo
	(*SubscribeNodeStatusRequest)(nil), // 15: emerald.SubscribeNodeStatusRequest
	(*NodeStatusResponse)(nil),         // 16: emerald.NodeStatusResponse
	(*NodeDescription)(nil),            // 17: emerald.NodeDescription
	(*NodeLabels)(nil),                 // 18: emerald.NodeLabels
	(*NodeStatus)(nil),                 // 19: emerald.NodeStatus
	(*DescribeRequest)(nil),            // 20: emerald.DescribeRequest
	(*DescribeResponse)(nil),           // 21: emerald.DescribeResponse
	(*DescribeChain)(nil),              // 22: emerald.DescribeChain
	(*BuildInfo)(nil),                  // 23: emerald.BuildInfo
	(*StatusRequest)(nil),              // 24: emerald.StatusRequest
	(*ChainStatus)(nil),                // 25: emerald.ChainStatus
	(*NodeDetails)(nil),                // 26: emerald.NodeDetails
	(*Label)(nil),                      // 27: emerald.Label
	(*Selector)(nil),                   // 28: emerald.Selector
	(*LabelSelector)(nil),              // 29: emerald.LabelSelector
	(*OrSelector)(nil),                 // 30: emerald.OrSelector
	(*AndSelector)(nil),                // 31: emerald.AndSelector
	(*NotSelector)(nil),                // 32: emerald.NotSelector
	(*ExistsSelector)(nil),             // 33: emerald.ExistsSelector
	(*EstimateFeeRequest)(nil),         // 34: emerald.EstimateFeeRequest
	(*EstimateFeeResponse)(nil),        // 35: emerald.EstimateFeeResponse
	(*EthereumStdFees)(nil),            // 36: emerald.EthereumStdFees
	(*EthereumExtFees)(nil),            // 37: emerald.EthereumExtFees
	(*BitcoinStdFees)(nil),             // 38: emerald.BitcoinStdFees
	(ChainRef)(0),                      // 39: emerald.ChainRef
	(*BlockInfo)(nil),                  // 40: emerald.BlockInfo
	(*Asset)(nil),                      // 41: emerald.Asset
	(*AnyAddress)(nil),                 // 42: emerald.AnyAddress
	(*SingleAddress)(nil),              // 43: emerald.SingleAddress
	(*Chain)(nil),                      // 44: emerald.Chain
}
var file_blockchain_proto_depIdxs = []int32{
	39, // 0: emerald.NativeCallRequest.chain:type_name -> emerald.ChainRef
	4,  // 1: emerald.NativeCallRequest.items:type_name -> emerald.NativeCallItem
	28, // 2: emerald.NativeCallRequest.selector:type_name -> emerald.Selector
	0,  // 3: emerald.NativeCallRequest.min_availability:type_name -> emerald.AvailabilityEnum
	5,  // 4: emerald.NativeCallReplyItem.signature:type_name -> emerald.NativeCallReplySignature
	39, // 5: emerald.NativeSubscribeRequest.chain:type_name -> emerald.ChainRef
	28, // 6: emerald.NativeSubscribeRequest.selector:type_name -> emerald.Selector
	5,  // 7: emerald.NativeSubscribeReplyItem.signature:type_name -> emerald.NativeCallReplySignature
	39, // 8: emerald.ChainHead.chain:type_name -> emerald.ChainRef
	39, // 9: emerald.TxStatusRequest.chain:type_name -> emerald.ChainRef
	40, // 10: emerald.TxStatus.block:type_name -> emerald.BlockInfo
	41, // 11: emerald.BalanceRequest.asset:type_name -> emerald.Asset
	42, // 12: emerald.BalanceRequest.address:type_name -> emerald.AnyAddress
	41, // 13: emerald.AddressBalance.asset:type_name -> emerald.Asset
	43, // 14: emerald.AddressBalance.address:type_name -> emerald.SingleAddress
	14, // 15: emerald.AddressBalance.utxo:type_name -> emerald.Utxo
	17, // 16: emerald.NodeStatusResponse.description:type_name -> emerald.NodeDescription
	19, // 17: emerald.NodeStatusResponse.status:type_name -> emerald.NodeStatus
	39, // 18: emerald.NodeDescription.chain:type_name -> emerald.ChainRef
	18, // 19: emerald.NodeDescription.nodeLabels:type_name -> emerald.NodeLabels
	23, // 20: emerald.NodeDescription.node_build_info:type_name -> emerald.BuildInfo
	27, // 21: emerald.NodeLabels.labels:type_name -> emerald.Label
	0,  // 22: emerald.NodeStatus.availability:type_name -> emerald.AvailabilityEnum
	22, // 23: emerald.DescribeResponse.chains:type_name -> emerald.DescribeChain
	23, // 24: emerald.DescribeResponse.build_info:type_name -> emerald.BuildInfo
	39, // 25: emerald.DescribeChain.chain:type_name -> emerald.ChainRef
	25, // 26: emerald.DescribeChain.status:type_name -> emerald.ChainStatus
	26, // 27: emerald.DescribeChain.nodes:type_name -> emerald.NodeDetails
	1,  // 28: emerald.DescribeChain.capabilities:type_name -> emerald.Capabilities
	39, // 29: emerald.StatusRequest.chains:type_name -> emerald.ChainRef
	39, // 30: emerald.ChainStatus.chain:type_name -> emerald.ChainRef
	0,  // 31: emerald.ChainStatus.availability:type_name -> emerald.AvailabilityEnum
	27, // 32: emerald.NodeDetails.labels:type_name -> emerald.Label
	29, // 33: emerald.Selector.labelSelector:type_name -> emerald.LabelSelector
	30, // 34: emerald.Selector.orSelector:type_name -> emerald.OrSelector
	31, // 35: emerald.Selector.andSelector:type_name -> emerald.AndSelector
	32, // 36: emerald.Selector.notSelector:type_name -> emerald.NotSelector
	33, // 37: emerald.Selector.existsSelector:type_name -> emerald.ExistsSelector
	28, // 38: emerald.OrSelector.selectors:type_name -> emerald.Selector
	28, // 39: emerald.AndSelector.selectors:type_name -> emerald.Selector
	28, // 40: emerald.NotSelector.selector:type_name -> emerald.Selector
	39, // 41: emerald.EstimateFeeRequest.chain:type_name -> emerald.ChainRef
	2,  // 42: emerald.EstimateFeeRequest.mode:type_name -> emerald.FeeEstimationMode
	36, // 43: emerald.EstimateFeeResponse.ethereumStd:type_name -> emerald.EthereumStdFees
	37, // 44: emerald.EstimateFeeResponse.ethereumExtended:type_name -> emerald.EthereumExtFees
	38, // 45: emerald.EstimateFeeResponse.bitcoinStd:type_name -> emerald.BitcoinStdFees
	44, // 46: emerald.Blockchain.SubscribeHead:input_type -> emerald.Chain
	12, // 47: emerald.Blockchain.SubscribeBalance:input_type -> emerald.BalanceRequest
	10, // 48: emerald.Blockchain.SubscribeTxStatus:input_type -> emerald.TxStatusRequest
	12, // 49: emerald.Blockchain.GetBalance:input_type -> emerald.BalanceRequest
	34, // 50: emerald.Blockchain.EstimateFee:input_type -> emerald.EstimateFeeRequest
	3,  // 51: emerald.Blockchain.NativeCall:input_type -> emerald.NativeCallRequest
	7,  // 52: emerald.Blockchain.NativeSubscribe:input_type -> emerald.NativeSubscribeRequest
	20, // 53: emerald.Blockchain.Describe:input_type -> emerald.DescribeRequest
	24, // 54: emerald.Blockchain.SubscribeStatus:input_type -> emerald.StatusRequest
	15, // 55: emerald.Blockchain.SubscribeNodeStatus:input_type -> emerald.SubscribeNodeStatusRequest
	9,  // 56: emerald.Blockchain.SubscribeHead:output_type -> emerald.ChainHead
	13, // 57: emerald.Blockchain.SubscribeBalance:output_type -> emerald.AddressBalance
	11, // 58: emerald.Blockchain.SubscribeTxStatus:output_type -> emerald.TxStatus
	13, // 59: emerald.Blockchain.GetBalance:output_type -> emerald.AddressBalance
	35, // 60: emerald.Blockchain.EstimateFee:output_type -> emerald.EstimateFeeResponse
	6,  // 61: emerald.Blockchain.NativeCall:output_type -> emerald.NativeCallReplyItem
	8,  // 62: emerald.Blockchain.NativeSubscribe:output_type -> emerald.NativeSubscribeReplyItem
	21, // 63: emerald.Blockchain.Describe:output_type -> emerald.DescribeResponse
	25, // 64: emerald.Blockchain.SubscribeStatus:output_type -> emerald.ChainStatus
	16, // 65: emerald.Blockchain.SubscribeNodeStatus:output_type -> emerald.NodeStatusResponse
	56, // [56:66] is the sub-list for method output_type
	46, // [46:56] is the sub-list for method input_type
	46, // [46:46] is the sub-list for extension type_name
	46, // [46:46] is the sub-list for extension extendee
	0,  // [0:46] is the sub-list for field type_name
}

func init() { file_blockchain_proto_init() }
func file_blockchain_proto_init() {
	if File_blockchain_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_blockchain_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeCallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeCallItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeCallReplySignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeCallReplyItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeSubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeSubscribeReplyItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Utxo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeNodeStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeLabels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeChain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Label); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Selector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistsSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstimateFeeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstimateFeeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumStdFees); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumExtFees); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitcoinStdFees); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_blockchain_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*Selector_LabelSelector)(nil),
		(*Selector_OrSelector)(nil),
		(*Selector_AndSelector)(nil),
		(*Selector_NotSelector)(nil),
		(*Selector_ExistsSelector)(nil),
	}
	file_blockchain_proto_msgTypes[32].OneofWrappers = []interface{}{
		(*EstimateFeeResponse_EthereumStd)(nil),
		(*EstimateFeeResponse_EthereumExtended)(nil),
		(*EstimateFeeResponse_BitcoinStd)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_blockchain_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_blockchain_proto_goTypes,
		DependencyIndexes: file_blockchain_proto_depIdxs,
		EnumInfos:         file_blockchain_proto_enumTypes,
		MessageInfos:      file_blockchain_proto_msgTypes,
	}.Build()
	File_blockchain_proto = out.File
	file_blockchain_proto_rawDesc = nil
	file_blockchain_proto_goTypes = nil
	file_blockchain_proto_depIdxs = nil
}
